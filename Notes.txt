$$$1. spread operator syntax example: <Todo key={todo.id} {...todo}/> (in the TodoList.js file)

$$$2. Why use Array.map() rather than Array.forEach()?
Array.forEach doesn't do anything with the returned value inside the callback.
forEach itself always returns undefined, not an array.
On the other hand, Array.map() turns all the returned values into a new array which is exactly what we want!
Maps return value is the array of new values.

From the docs for forEach:
"forEach() executes the callback function once for each array element;
unlike map() or reduce() it always returns the value undefined and is not chainable.
The typical use case is to execute side effects at the end of a chain."

$$$3. Arrow functions only implicitly return when using the expression syntax with no curly braces.
The statements syntax with curly braces does require an explicit return statements.

To see an example - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions

$$$4. Question: why can't we just have this.handleSubmit on the button onClick event instead of having a form and then onSubmit?
Answer: Form tags are still an important thing to use, we're just switching up how we use it.
onClick limits how the user can submit the form.
People using the keyboard and clicking the enter key to submit the form will not able to.
They'll have to click the button.

Using the form tag with onSubmit opens up a wider range of options and accessibility enhancements.
I would not reccomend creating a form without a form tag.
It's use has evolved with the modern web.

$$$5. In test.js file, should we use ref or ReactDOM.findDOMNode()?
From Andrew:
We previously used "var form = ReactDOM.findDOMNode(...)" to target the form and simulate a submit action.
We don't need to do that here since we have refs defined on our input fields.
The refs point directly to the DOM nodes we want to simulate events on.
That means ReactDOM.findDOMNode(...) is not necessary.

I use jQuery in the tests to allow for more flexible querying of the components DOM.
You can 100% remove jQuery and use refs,
I just found it annoying to create all these refs that were only going to be used by my test file.

$$$6.
Remember, every time we run webpack we are generating a bundle.js file.
That bundle.js file contains all the JavaScript we need to run our app.
It has code we wrote, and it has 3rd party module code we've required.

In this scenario, I would only add the modules actually required on Heroku which would be express.
Express is used in server.js and is not bundled with our app.
Everything else gets bundled via webpack and pushed to Heroku.

In lecture 137 we switch the process around and run webpack on the server to see how that would work.
In that case we would need uuid and our other modules under dependencies, not devDependencies.

$$$7. Why use uuid rather than doing things like this - "id: this.state.todos.length + 1"
I would just be careful when it comes to deleting todos.
If I add a todo to an empty array, its id will be 1 (length of 0 plus 1).
Now lets say I add 4 more, so the ids 1, 2, 3, 4, and 5 are taken.
If I remove the todo with an id of 2 and try to add another, the id generated is going to be 5 which already exists.
I'm assuming you're using the same exact code as Spencer was.

I prefer to use node-uuid to generate cryptographically strong ids.

$$$8.
Regular functions using the function keyword create a new this binding.
You can keep the parent this binding by defining an arrow function!
Arrow functions to not create a new this binding

$$$9. How would you store images, videos, etc that is not easily converted into string be stored? Like user profile picture.
Answer: There are a few way you can do this.
I would reccomend using a service built for files like AWS S3 or the new Firebase storage features.
When you're working with videos or images in your app (with or without redux)
you should try to pass around ID as opposed to the entire contents of the file.
If I want someone to be able to upload a file, I would made a call to the Firebase/AWS API to upload the file.
I would then get a unique ID back, and that's the string I would store in my database or in localStorage.

$$$10. localStorage does NOT persist between different browsers

$$$11. beforeEach method runs before every test defined in it() method

// beforeEach "a"

// it "a" - will have beforeEach "a" executed before it runs

// describe some group

    // beforeEach "b"

    // it "b" - will have beforeEach "a" and "b" executes before it runs

$$$12. expect assertions toBe() vs toEqual()
toBe() compares the value using the tripe equals like so: 1 === 1
toEqual() compares values using the is-equal library.
This allows us to check if two arrays or objects are the same.

Try running the following statements. They are all going to result in false.

{} === {};  // false
[1] === [1];  // false

JavaScript is checking if they are the same object, not two objects/arrays with the same values.
The is-equal library will compare for values which we want!

$$$13. Keep css attributes in alpha-betical order; make it eary to scan

$$$14. SCSS topic - Naming variables
Hey Andrew,
I've noticed that you tend to name variables that define colors with the color name.

$grey: #333;
$light-grey: #666;

This leads to situations where in order to quickly adapt to clients' or leads' requests
we resort to change the value of the variables while maintaining the variable names.
So that we might have a variable $grey that in fact set a color that is totally different than the original.

$grey: teal;

On the other hand, if you will decide to change the variable name from $grey to $teal,
you will de facto defy the very reason you used a variable in the first place
because you will have to go throw all your files and change all instances of $grey into $teal.

A better approach is to create variables with a functional name.

$background-color: #333;

If so, it will not matter if we have to dramatically change the color of the variable.
Whatever color, it will always be the background color.

A similar approach can be used for lightening up a color.
Instead of $light-grey, I'd prefer the following approach.

$background-color-alt: lighten($background-color, 10%);

That allows for a structure that's easier to manipulate in future,
might you have to editing its fundamental values drastically.

$$$15. Open this link if you want to move to bootstrap:
https://www.udemy.com/the-complete-react-web-app-developer-course/learn/v4/questions/1873574

$$$16. SCSS Partials
You can create partial Sass files that contain little snippets of CSS that you can include in other Sass files.
This is a great way to modularize your CSS and help keep things easier to maintain.
A partial is simply a Sass file named with a leading underscore.
You might name it something like _partial.scss.
The underscore lets Sass know that the file is only a partial file and that it should not be generated into a CSS file.
Sass partials are used with the @import directive.

$$$17. .toBe() vs .toEqual()?
.toBe() would be a little faster as it uses === and .toEqual() uses a 3rd party library called is-equal.
I've always preferred toEqual because I don't have to think about what values I'm passing in (object or boolean).
I can pass in my values and know it'll work as expected.

$$$18. Actions and reducers
An action only returns a description of what is to be done,
while a reducer takes that description and calculates
what the next state should be after applying the action.

The action object doesn't define the state.
It defines the changes that should be made.
This might include nothing but a type property.
It would be unmanageable if every action needed to compute the entire state.

The reducer (or reducers) takes the current state and the action.
It uses these two to compute and return the new state.
If we removed reducers, we would still need to compute the state.
Reducers are a solution to that problem.

$$$19. There is really no reason to deep freeze primitive values (boolean, number) or strings
as by their very nature they are immutable; These don't need to be passed through deep-freeze-strict.
This is done out of a habit to freeze everything getting passed into the reducer.

Only Objects (which would include arrays) are passed by reference.

$$$20. Question: Is there a difference between Deep Freeze package and Object.freeze() function?
Answer: Deep Freeze will recursively freeze all nested functions and objects.
Object.freeze only freezes top-level properties. For example:

var user = {
    name: 'Andrew',
    age: {
        num: 25
    }
};
var frozenUser = Object.freeze(user);

In the above example, I would not be able to update frozenUser.name
I would however be able to update frozenUser.age.num without any problems.
Deep Freeze would not allow someone to update frozenUser.age.num

$$$21. Both spread operator and Object.assign() are shallow copy.
Link for deep copy vs. shallow copy - https://www.cs.utexas.edu/~scottm/cs307/handouts/deepCopying.htm
Code example to find out:
let origOne = {
  user: {
    name: "Andrew"
  }
}
let newOne = {};
Object.assign(newOne, origOne);
newOne.user.name = "Mike";
console.log(origOne); // Will print "Mike"


let origTwo = {
  user: {
    name: "Andrew"
  }
}
let newTwo = { ...origTwo };
newTwo.user.name = "Mike";
console.log(origTwo); // Will print "Mike"

$$$22. Modern browsers are adding these features to their JavaScript engines.
The reason we use babel is to allow our web apps to run on older browsers that don't support them.
Babel also allows us to use JSX which is a language extension.

$$$23. The process of converting a react app to redux usually goes like this.
First, pull out most (not all) of the components state into the redux store instead.
This means creating a few reducers that know how to manage those redux store attributes.

Then you'll want to replace all the prop methods with calls to dispatch.
Instead of passing a callback from ComponentA to ComponentB to "listen" for an event,
ComponentB will dispatch an action.

The last step would be to connect() all the component with the data they need to render themselves.

$$$23. About connect()()
connect() returns a brand new React component, it doesn't alter the component passed in.
The newly created component injects the state/actions into your component
(the one passed into the function returned from connect()).

On the first call we're simply providing a set of functions that will be
used in the new component to determine what state/actions we'd like to use.
On the second call we're getting back that new react component that's using the function we previously passed in.
Those functions are used internally to properly render our component.

We do pass in arguments directly to connect in the course to access redux state in a component.
With connect, the component gets passed as an argument to the function that gets returned from connect.

$$$24. In lecture 137 you'll learn how to run webpack on Heroku.
This is great because we'll be able to remove bundle.js from our Git repo.
It will require the non-test dependencies to be under "dependencies".
devDependencies should have only dependencies required to execute tests, like unit-testing, integrated-testing, etc.

$$$25. module.exports vs export default
Pre-ES6: In ES5, we have require and we have module.exports.

ES6: In ES6, we have the import and export statement.

I recommend sticking with import and export because it's more flexible than require and module.exports
For example, it supports defaults as well as named exports. This is not supported with require/module.exports.

Also, do NOT mix import with module.export or mix require with export. They don't work together!

$$$26.
While you could have multiple stores, there is a Redux FAQ that outlines why this is
generally not what you want (http://redux.js.org/docs/faq/StoreSetup.html#store-setup-multiple-stores)
It would be better to create a new reducer instead of a new store.

From the article:
"The original Flux pattern describes having multiple “stores” in an app, each one holding a different area of domain data.
This can introduce issues such as needing to have one store “waitFor” another store to update.
This is not necessary in Redux because the separation between data domains is already
achieved by splitting a single reducer into smaller reducers.

As with several other questions, it is possible to create multiple distinct Redux stores in a page,
but the intended pattern is to have only a single store.
Having a single store enables using the Redux DevTools, makes persisting and rehydrating data simpler,
and simplifies the subscription logic."

$$$27. When we call connect, we're "connecting" our Redux store to the React component.
The function passed into connect tells Redux which pieces of information the React component should have access to.
You could call connect without arguments if you don't need any data from the Redux store.
You'd just be able to dispatch actions like we do for AddTodo.

$$$28.
When we export default ... we need to adjust our require statement.
We can either replace it with an import statement, or we can access the default property that comes back from require.
Import supports the default export keyword by default. This would be the preferred way to do things.

Either of these options will work:

import AddTodo from 'AddTodo';
// or
var AddTodo = require('AddTodo').default;

$$$29. With ES6 imports you can pull off the default and/or the members.
If you want to grab all the members and store them on the action object, the following import syntax will get that done:

import * as actions from 'actions';

import actions from 'actions'; only grabs the default

For a full list of all the ways import can be used, check out import of MDN:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import

$$$30. About export + require
// someModule.js
export default "val"; // this is called default export
export var name = "Andrew"; // this is called a named export

// app.js
var someModule = require('./someModule');
console.log(someModule === "val"); // Should print true, but it will not
console.log(someModule.name === "Andrew"); // Should print true

Because we would have needed to grab the default prop; The someModule variable looks like this:
{
  "default": "val",
  "name": "Andrew"
}

So below code would work:
// app.js
var someModule = require('./someModule');
console.log(someModule.default === "val"); // Should print true
console.log(someModule.name === "Andrew"); // Should print true

$$$31. Currently there is a limitation of TestUtils:
it's unable to find components created with the Stateless Functional Components technique.
If you switch it over to React.createClass the test case will pass.

$$$32.
Many of the ES6 features we use in this course were not yet supported by major browsers
(Right now most of them are supported by major browsers).
This is why we use babel.
It enables us to use things like arrow functions and ES6 imports/exports in our projects today.

$$$33. With ES6 we now have a single optional default export and as many named exports as we like.

$$$34. TestUtils.renderIntoDocument(<.../>); returns components
React.findDOMNode(component); returns the corresponding native browser DOM element or you can say the rendered DOM.

$$$35. React doesn't care where the data gets stored (or if it gets stored at all).
I use Firebase in this course because we're able to persist our data to a database without creating a back-end.
You can use PostgreSQL, but you'll need to create a back-end API that your front-end communicates with.
This could be an HTTP API or a WebSockets API. I'd recommend Node!

$$$36. Chaining is accomplished by having every method return the object the method is defined on.
That would look like this:

var store = {
  sell : function() {
    console.log("Sell an apple");
    return this;
  },
  tax: function() {
    console.log("No tax");
    return this;
  }
}

store.sell().tax().sell();

This would print:

"Sell an apple"
"No tax"
"Sell an apple"

$$$37. CRUD operations: creating, reading, updating, and deleting.

$$$38. All the back end data activity should be kept totally separate from everything else
so it can be swapped in and out depending on what database we wish to use.
Here, it appears as if we are tying the app in far too much with Firebase,
I find this to be a strange decision, and also complicates the extensibility of the app.

$$$39. redux-mock-store is a mock store for testing your redux async action creators and middleware;
You can use it to test synchronous actions as well.
Documentation - http://arnaudbenard.com/redux-mock-store/

$$$40. About .catch()
You have two options for running code when a promise gets rejected.

.then() - Instead of passing one function to then, you can pass two!
The first function, which is the first argument, will run if the promise is resolved.
The second function will get called if the promise is rejected.
When using this pattern there is no need to call .catch().

.catch() - As an alternative .then(), you can chain on a call to .catch().
Catch takes one function and that function will run if the promise is rejected.

In a basic example both methods will result in similar behavior.
catch() can be used strategically in a more complex example with multiple promises.
Take a look at this example http://jsbin.com/sigaviz/edit?js,console (click "run" to run it once). 
Here catch is defined at the very end of our chain.
It lets us specify one error function regardless of which promise got reject.
In this case it just happens to be the first promise that fails.
