$$$1. spread operator syntax example: <Todo key={todo.id} {...todo}/> (in the TodoList.js file)

$$$2. Why use Array.map() rather than Array.forEach()?
Array.forEach doesn't do anything with the returned value inside the callback.
forEach itself always returns undefined, not an array.
On the other hand, Array.map() turns all the returned values into a new array which is exactly what we want!
Maps return value is the array of new values.

From the docs for forEach:
"forEach() executes the callback function once for each array element;
unlike map() or reduce() it always returns the value undefined and is not chainable.
The typical use case is to execute side effects at the end of a chain."

$$$3. Arrow functions only implicitly return when using the expression syntax with no curly braces.
The statements syntax with curly braces does require an explicit return statements.

To see an example - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions

$$$4. Question: why can't we just have this.handleSubmit on the button onClick event instead of having a form and then onSubmit?
Answer: Form tags are still an important thing to use, we're just switching up how we use it.
onClick limits how the user can submit the form.
People using the keyboard and clicking the enter key to submit the form will not able to.
They'll have to click the button.

Using the form tag with onSubmit opens up a wider range of options and accessibility enhancements.
I would not reccomend creating a form without a form tag.
It's use has evolved with the modern web.

$$$5. In test.js file, should we use ref or ReactDOM.findDOMNode()?
From Andrew:
We previously used "var form = ReactDOM.findDOMNode(...)" to target the form and simulate a submit action.
We don't need to do that here since we have refs defined on our input fields.
The refs point directly to the DOM nodes we want to simulate events on.
That means ReactDOM.findDOMNode(...) is not necessary.

I use jQuery in the tests to allow for more flexible querying of the components DOM.
You can 100% remove jQuery and use refs,
I just found it annoying to create all these refs that were only going to be used by my test file.

$$$6.
Remember, every time we run webpack we are generating a bundle.js file.
That bundle.js file contains all the JavaScript we need to run our app.
It has code we wrote, and it has 3rd party module code we've required.

In this scenario, I would only add the modules actually required on Heroku which would be express.
Express is used in server.js and is not bundled with our app.
Everything else gets bundled via webpack and pushed to Heroku.

In lecture 137 we switch the process around and run webpack on the server to see how that would work.
In that case we would need uuid and our other modules under dependencies, not devDependencies.

$$$7. Why use uuid rather than doing things like this - "id: this.state.todos.length + 1"
I would just be careful when it comes to deleting todos.
If I add a todo to an empty array, its id will be 1 (length of 0 plus 1).
Now lets say I add 4 more, so the ids 1, 2, 3, 4, and 5 are taken.
If I remove the todo with an id of 2 and try to add another, the id generated is going to be 5 which already exists.
I'm assuming you're using the same exact code as Spencer was.

I prefer to use node-uuid to generate cryptographically strong ids.

$$$8.
Regular functions using the function keyword create a new this binding.
You can keep the parent this binding by defining an arrow function!
Arrow functions to not create a new this binding

$$$9. How would you store images, videos, etc that is not easily converted into string be stored? Like user profile picture.
Answer: There are a few way you can do this.
I would reccomend using a service built for files like AWS S3 or the new Firebase storage features.
When you're working with videos or images in your app (with or without redux)
you should try to pass around ID as opposed to the entire contents of the file.
If I want someone to be able to upload a file, I would made a call to the Firebase/AWS API to upload the file.
I would then get a unique ID back, and that's the string I would store in my database or in localStorage.

$$$10. localStorage does NOT persist between different browsers

$$$11. beforeEach method runs before every test defined in it() method

// beforeEach "a"

// it "a" - will have beforeEach "a" executed before it runs

// describe some group

    // beforeEach "b"

    // it "b" - will have beforeEach "a" and "b" executes before it runs
